///** @file
// * Copyright (c) 2019, Arm Limited or its affiliates. All rights reserved.
// * Copyright 2023 NXP
// * SPDX-License-Identifier : Apache-2.0
// *
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *  http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
//**/

// UART device info
uart.num=1;
uart.0.base = 0x40109000; // UART3_NS
uart.0.size = 0xFFF;
uart.0.intr_id = 0xFF;
uart.0.permission = TYPE_READ_WRITE;

// Watchdog device info
watchdog.num = 0;

// Range of 1KB Non-volatile memory to preserve data over reset.
// This is an emulation in RAM. It uses the last 1Kib of RAM available to NS.
// Note, that RAM usage for NS is restricted, the value here must match up with
// The value that TF-M allows for NS (see also
trusted-firmware-m\platform\ext\target\nxp\rdrw61x\partition\region_defs.h).
// The size available to NS also needs to be known to the linker when building 
// NS projects. When building this application, it is recommended to not allow 
// usage of the memory used for nvmem emulation. How to achieve this depends on 
// the build system.
// For zephyr builds usually a _ns board configuration holds the available memory 
// for the NS partition. 
// Such settings split over multiple repositories tend to de-sync, so please take 
// care and the following numbers with extra-caution!
nvmem.num =1;
nvmem.0.start = 0x2012FC00;
nvmem.0.end = 0x20130000;
nvmem.0.permission = TYPE_READ_WRITE;
